@import '../../../../frontmask/scssmixin/buttonColors.scss';

/// Inherit height and width from parent who has set it by the layout
.rc-button {
    --btnJustify: center;
    --btnAlign: center;
    --btnPadding: var(--btnPTB) var(--btnPLR);

    height: inherit;
    width: inherit;

    justify-content: var(--btnJustify);
    align-items: var(--btnAlign);
    padding: var(--btnPadding);

    .p-button-icon-left {
        margin-right: 0;
    }
    .p-button-icon-right {
        margin-left: 0;
    }

    @include btnHover
}

/// If the button is dark set the foreground to white
.bright {
    color: var(--btnColorBright);
    &:enabled:hover {
        color: var(--btnColorBright);
    }
}

/// If the button is bright set the foreground to a darker color
.dark {
    color: var(--standardTextColor);
    &:enabled:hover {
        color: var(--standardTextColor);
    }
}

/// When the border is not painted background and border are transparent and the color is set to standard
.border-notpainted, .border-notpainted:enabled:hover {
    background: transparent;
    border-color: transparent;
    color: var(--standardTextColor);
}

/// Show that a button without border is hovered
.mouse-border:enabled:hover {
    background: var(--background);
    border-color: var(--background);
}

.p-button-label {
    flex: unset;
}

/// When there is only an icon it is possible that the padding for the button is to big and the icon is not displayed,
/// margin minus padding displays the icon
.p-button-icon-only {
    .rc-button-icon {
        margin: calc(var(--btnPTB) * -1) calc(var(--btnPLR) * -1) !important;
    }
}

.rc-button-icon {
    font-size: var(--iconHeight);
    color: var(--iconColor);
    &:not([class*="fa fa-"]) {
        width: var(--iconWidth);
        height: var(--iconHeight);
        display: inline-block;
        background-image: var(--iconImage);
    }

    &:not(span) {
        margin-right: var(--iconTextGap);
    }

    @at-root #{selector-unify(&, "span")} {
        .gap-top & {
            margin-top: var(--iconTextGap);
        }
        .gap-left & {
            margin-left: var(--iconTextGap);
        }
        .gap-right & {
            margin-right: var(--iconTextGap);
        }
        .gap-bottom & {
            margin-bottom: var(--iconTextGap);
        }
        .icon-center-left & {
            margin-left: var(--iconCenterGap)
        }
        .icon-center-right & {
            margin-right: var(--iconCenterGap)
        }
    }
}


@import '../../../../frontmask/scssutil/buttonColors.scss';

/// Inherit height and width from parent who has set it by the layout
.rc-button {
    --btnJustify: center;
    --btnAlign: center;

    height: inherit;
    width: inherit;

    justify-content: var(--btnJustify);
    align-items: var(--btnAlign);
    padding: var(--btnPadding, 0.5rem 1rem);

    .p-button-icon-left {
        margin-right: 0;
    }
    .p-button-icon-right {
        margin-left: 0;
    }

    &.mouse-border {
        background: transparent;
        border-color: transparent;
        color: var(--default-text-color);
    }

    @include btnHover
}

.btr {
    .rc-button {
        padding: var(--btnPadding, var(--btr-button-padding, 0.5rem 1rem));
    }

    .p-button.p-button-icon-only {
        padding: var(--btnPadding, var(--btr-button-icon-only-padding, 0.5rem 0.5rem));
    }
}

.btr-small {
    .rc-button {
        padding: var(--btnPadding, var(--btrs-button-padding, 0.125rem 0.25rem));
    }

    .p-button.p-button-icon-only {
        padding: var(--btnPadding, var(--btrs-button-icon-only-padding, 0.25rem 0.25rem));
    }
}

.p-button.p-button-icon-only {
    width: unset;
    //height: inherit;
    &.p-autocomplete-dropdown, &.p-datepicker-trigger {
        padding: 0px 0.5rem;
    }
    padding: var(--btnPadding, 0.5rem 0.5rem);
    .rc-button-icon {
        align-self: center;
    }
    &.rc-toolbar-button {
        padding: 0;
    }
}

/// If the button is dark set the foreground to white
.bright-button {
    color: var(--button-color-bright);
    &:enabled:hover {
        color: var(--button-color-bright);
    }
}

/// If the button is bright set the foreground to a darker color
.dark-button {
    color: var(--button-color-dark);
    &:enabled:hover {
        color: var(--button-color-dark);
    }
}

/// When the border is not painted background and border are transparent and the color is set to standard
.border-notpainted, .border-notpainted:enabled:hover {
    background: transparent !important;
    border-color: transparent !important;
    color: var(--default-text-color);
}

.p-button-label {
    flex: unset;
}



.rc-button.p-button.p-button-icon-only {
    width: inherit;
    height: inherit;
}

.rc-button-icon {
    font-size: var(--iconHeight);
    color: var(--iconColor);
    &:not([class*="fa fa-"]) {
        width: var(--iconWidth);
        height: var(--iconHeight);
        display: inline-block;
        background-image: var(--iconImage);
    }

    &:not(span) {
        margin-right: 4px;
    }

    @at-root #{selector-unify(&, "span")} {
        .gap-top:not(.p-button-icon-only) & {
            margin-top: var(--iconTextGap);
        }
        .gap-left:not(.p-button-icon-only) & {
            margin-left: var(--iconTextGap);
        }
        .gap-right:not(.p-button-icon-only) & {
            margin-right: var(--iconTextGap);
        }
        .gap-bottom:not(.p-button-icon-only) & {
            margin-bottom: var(--iconTextGap);
        }
        .icon-center-left & {
            margin-left: var(--iconCenterGap)
        }
        .icon-center-right & {
            margin-right: var(--iconCenterGap)
        }
    }
}

